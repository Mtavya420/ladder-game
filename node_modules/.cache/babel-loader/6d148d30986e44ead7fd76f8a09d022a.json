{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { initState, reducer } from \"Reducer\";\n\nconst useHook = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const increasePlayers = () => dispatch({\n    type: \"INCREASE_PLAYERS\"\n  });\n\n  const decreasePlayers = () => dispatch({\n    type: \"DECREASE_PLAYERS\"\n  });\n\n  const enterGame = () => dispatch({\n    type: \"ENTER_GAME\"\n  });\n\n  const startGame = () => dispatch({\n    type: \"START_GAME\"\n  });\n\n  const isReady = (cases, playerCount) => {\n    const values = Object.values(cases);\n    const state = values.every(value => value.trim() !== \"\");\n    const caseCount = values.length === playerCount;\n    dispatch({\n      type: \"CHECK_READY\",\n      gameState: state && caseCount\n    });\n  };\n\n  const resetCase = playerCount => {\n    const cases = {};\n\n    for (let i = 0; i < playerCount; i++) cases[i] = \"\";\n\n    dispatch({\n      type: \"RESET_CASE\",\n      cases\n    });\n  };\n\n  const inputCase = (e, idx) => {\n    const {\n      value\n    } = e.target;\n    dispatch({\n      type: \"INPUT_CASE\",\n      idx,\n      value\n    });\n  };\n\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n\n  const getRandomPlayers = (playerCount, data) => {\n    const players = new Set();\n\n    while (players.size < playerCount) players.add(data[getRandomNumber(0, 10)]);\n\n    dispatch({\n      type: \"GET_PLAYERS\",\n      players: [...players]\n    });\n  };\n\n  const getRandomLegs = playerCount => {\n    const legs = [];\n\n    for (let i = 0; i < playerCount; i++) legs.push(getRandomNumber(1, 10));\n\n    dispatch({\n      type: \"GET_LEGS\",\n      legs\n    });\n  };\n\n  const goHome = () => dispatch({\n    type: \"GO_HOME\"\n  });\n\n  const goResult = () => dispatch({\n    type: \"GO_RESULT\"\n  });\n\n  const goGame = () => dispatch({\n    type: \"GO_GAME\"\n  });\n\n  return {\n    state,\n    increasePlayers,\n    decreasePlayers,\n    enterGame,\n    startGame,\n    isReady,\n    resetCase,\n    inputCase,\n    getRandomPlayers,\n    getRandomLegs,\n    goHome,\n    goResult,\n    goGame\n  };\n};\n\n_s(useHook, \"ivzsx5aR9qRFuEtyOcndflQiQ1Q=\");\n\nexport default useHook;","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Hooks.js"],"names":["useReducer","initState","reducer","useHook","state","dispatch","increasePlayers","type","decreasePlayers","enterGame","startGame","isReady","cases","playerCount","values","Object","every","value","trim","caseCount","length","gameState","resetCase","i","inputCase","e","idx","target","getRandomNumber","min","max","Math","ceil","floor","random","getRandomPlayers","data","players","Set","size","add","getRandomLegs","legs","push","goHome","goResult","goGame"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport { initState, reducer } from \"Reducer\";\n\nconst useHook = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const increasePlayers = () => dispatch({ type: \"INCREASE_PLAYERS\" });\n  const decreasePlayers = () => dispatch({ type: \"DECREASE_PLAYERS\" });\n\n  const enterGame = () => dispatch({ type: \"ENTER_GAME\" });\n  const startGame = () => dispatch({ type: \"START_GAME\" });\n\n  const isReady = (cases, playerCount) => {\n    const values = Object.values(cases);\n    const state = values.every((value) => value.trim() !== \"\");\n    const caseCount = values.length === playerCount;\n    dispatch({ type: \"CHECK_READY\", gameState: state && caseCount });\n  };\n\n  const resetCase = (playerCount) => {\n    const cases = {};\n    for (let i = 0; i < playerCount; i++) cases[i] = \"\";\n    dispatch({ type: \"RESET_CASE\", cases });\n  };\n\n  const inputCase = (e, idx) => {\n    const { value } = e.target;\n    dispatch({ type: \"INPUT_CASE\", idx, value });\n  };\n\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n\n  const getRandomPlayers = (playerCount, data) => {\n    const players = new Set();\n    while (players.size < playerCount)\n      players.add(data[getRandomNumber(0, 10)]);\n    dispatch({ type: \"GET_PLAYERS\", players: [...players] });\n  };\n\n  const getRandomLegs = (playerCount) => {\n    const legs = [];\n    for (let i = 0; i < playerCount; i++) legs.push(getRandomNumber(1, 10));\n    dispatch({ type: \"GET_LEGS\", legs });\n  };\n\n  const goHome = () => dispatch({ type: \"GO_HOME\" });\n  const goResult = () => dispatch({ type: \"GO_RESULT\" });\n  const goGame = () => dispatch({ type: \"GO_GAME\" });\n\n  return {\n    state,\n    increasePlayers,\n    decreasePlayers,\n    enterGame,\n    startGame,\n    isReady,\n    resetCase,\n    inputCase,\n    getRandomPlayers,\n    getRandomLegs,\n    goHome,\n    goResult,\n    goGame,\n  };\n};\n\nexport default useHook;\n"]},"metadata":{},"sourceType":"module"}