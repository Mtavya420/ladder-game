{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, { useRef, useEffect, useCallback, useContext, useState } from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({\n  idx,\n  canvasRef\n}) => {\n  _s();\n\n  const {\n    state,\n    getResult\n  } = useContext(Context);\n  const {\n    legs,\n    players,\n    playerCount\n  } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 0;\n  let isCrossing = false;\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const gapY = canvasHeight / 10;\n  const gapX = canvasWidth / (playerCount * 2);\n  let coordY = 0;\n\n  const getNewX = posX => {\n    const newX = posX === 0 ? gapX * (2 * idx + 1) + 1.5 : idx === playerCount - 1 ? gapX * (2 * idx + 1) - 1.5 : gapX * (2 * idx + 1);\n    return newX;\n  };\n\n  let coordX = getNewX(posX);\n\n  const drawFootprint = (X, Y) => {\n    ctx.beginPath();\n    ctx.arc(X, Y, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = direction => {\n    console.log(\"is crossing\");\n    const newX = direction === \"right\" ? coordX + 2 : coordX - 2;\n    drawFootprint(newX, coordY);\n\n    if (newX >= getNewX(posX)) {\n      isCrossing = false;\n      coordY += radius;\n      console.log(\"finish crossing\");\n    }\n  };\n\n  const drawPath = () => {\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      getResult(idx, posX);\n      return;\n    }\n\n    const needChecking = coordY % gapY === 0;\n    let direction = \"sraight\";\n    console.log(\"is drawing ==========\");\n    console.log(needChecking, coordY, gapY, canvasHeight, coordY % gapY);\n\n    if (needChecking) {\n      const isRight = legs[posX] && legs[posX].includes(posY);\n      const isLeft = legs[posX - 1] && legs[posX - 1].includes(posY);\n      direction = isRight ? \"right\" : isLeft ? \"left\" : \"straight\";\n      console.log(\"is checking ===============\");\n      console.log(isLeft, isRight);\n      console.log(idx, posX, direction, posY);\n      posY++;\n      posX = isRight ? posX + 1 : isLeft ? posX - 1 : posX;\n      isCrossing = true;\n    }\n\n    if (isCrossing) {\n      console.log(\"is crossing =============\");\n      console.log(\"인덱스\", idx, \"posX, posY\", posX, posY);\n      crossLeg(direction);\n    }\n\n    if (!isCrossing) coordY += radius;\n    drawFootprint(coordX, coordY);\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 3000);\n  }, [canvasRef, canvas]);\n  return /*#__PURE__*/_jsxDEV(Paths, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PathsContainer, \"cu8KK91pc/D0otuQ+QyLowSqbtc=\");\n\n_c = PathsContainer;\nexport default PathsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathsContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js"],"names":["Paths","React","useRef","useEffect","useCallback","useContext","useState","Context","PathsContainer","idx","canvasRef","state","getResult","legs","players","playerCount","canvas","setCanvas","draw","posX","posY","isCrossing","ctx","getContext","canvasWidth","width","canvasHeight","height","viewPort","window","innerWidth","radius","gapY","gapX","coordY","getNewX","newX","coordX","drawFootprint","X","Y","beginPath","arc","Math","PI","fillStyle","color","fill","closePath","crossLeg","direction","console","log","drawPath","clearInterval","needChecking","isRight","includes","isLeft","current","setInterval"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, {\n  useRef,\n  useEffect,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({ idx, canvasRef }) => {\n  const { state, getResult } = useContext(Context);\n  const { legs, players, playerCount } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 0;\n  let isCrossing = false;\n\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const gapY = canvasHeight / 10;\n  const gapX = canvasWidth / (playerCount * 2);\n  let coordY = 0;\n\n  const getNewX = (posX) => {\n    const newX =\n      posX === 0\n        ? gapX * (2 * idx + 1) + 1.5\n        : idx === playerCount - 1\n        ? gapX * (2 * idx + 1) - 1.5\n        : gapX * (2 * idx + 1);\n\n    return newX;\n  };\n\n  let coordX = getNewX(posX);\n\n  const drawFootprint = (X, Y) => {\n    ctx.beginPath();\n    ctx.arc(X, Y, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = (direction) => {\n    console.log(\"is crossing\");\n    const newX = direction === \"right\" ? coordX + 2 : coordX - 2;\n    drawFootprint(newX, coordY);\n    if (newX >= getNewX(posX)) {\n      isCrossing = false;\n      coordY += radius;\n      console.log(\"finish crossing\");\n    }\n  };\n\n  const drawPath = () => {\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      getResult(idx, posX);\n      return;\n    }\n\n    const needChecking = coordY % gapY === 0;\n    let direction = \"sraight\";\n\n    console.log(\"is drawing ==========\");\n    console.log(needChecking, coordY, gapY, canvasHeight, coordY % gapY);\n\n    if (needChecking) {\n      const isRight = legs[posX] && legs[posX].includes(posY);\n      const isLeft = legs[posX - 1] && legs[posX - 1].includes(posY);\n      direction = isRight ? \"right\" : isLeft ? \"left\" : \"straight\";\n\n      console.log(\"is checking ===============\");\n      console.log(isLeft, isRight);\n      console.log(idx, posX, direction, posY);\n\n      posY++;\n      posX = isRight ? posX + 1 : isLeft ? posX - 1 : posX;\n      isCrossing = true;\n    }\n\n    if (isCrossing) {\n      console.log(\"is crossing =============\");\n      console.log(\"인덱스\", idx, \"posX, posY\", posX, posY);\n      crossLeg(direction);\n    }\n\n    if (!isCrossing) coordY += radius;\n\n    drawFootprint(coordX, coordY);\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 3000);\n  }, [canvasRef, canvas]);\n\n  return <Paths />;\n};\n\nexport default PathsContainer;\n"]},"metadata":{},"sourceType":"module"}