{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({\n  idx,\n  canvasRef\n}) => {\n  _s();\n\n  const {\n    state,\n    updateResult\n  } = useContext(Context);\n  const {\n    legs,\n    players,\n    playerCount\n  } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 0;\n  let isCrossing = false;\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const move = 1;\n  const gapX = canvasWidth / (playerCount * 2);\n  const gapY = canvasHeight / 10;\n  let coordX = gapX * (2 * idx + 1);\n  let coordY = 0;\n  const RIGHT = \"RIGHT\";\n  const LEFT = \"LEFT\";\n  const STRAIGHT = \"STRAIGHT\";\n  let direction = STRAIGHT;\n\n  const getFinalX = (newX, direction) => {\n    let finalX = gapX * (2 * newX + 1);\n    finalX = direction === RIGHT ? finalX - 1 : finalX + 1;\n    return finalX;\n  };\n\n  const drawFootprint = (X, Y) => {\n    const image = new Image();\n    image.src = players[idx].src;\n    console.log(image);\n    ctx.drawImage(image, X, Y, 20, 20);\n    ctx.beginPath();\n    ctx.arc(X, Y, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = direction => {\n    const finalX = getFinalX(posX, direction);\n    const reachFinalRightX = direction === RIGHT && coordX >= finalX;\n    const reachFinalLeftX = direction === LEFT && coordX <= finalX;\n    coordX = direction === RIGHT ? coordX + move : coordX - move;\n    drawFootprint(coordX, coordY);\n\n    if (reachFinalLeftX || reachFinalRightX) {\n      isCrossing = false;\n      coordY += move;\n    }\n  };\n\n  const drawPath = () => {\n    let needChecking = coordY !== 0 && coordY % gapY === 0 && !isCrossing;\n\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      updateResult(idx, posX);\n      return;\n    }\n\n    if (needChecking) {\n      const isRight = legs[posX] && legs[posX].includes(posY) || false;\n      const isLeft = legs[posX - 1] && legs[posX - 1].includes(posY) || false;\n      direction = isRight ? RIGHT : isLeft ? LEFT : STRAIGHT;\n      posY++;\n      posX = isRight ? posX + move : isLeft ? posX - move : posX;\n      isCrossing = direction !== STRAIGHT;\n    }\n\n    if (isCrossing) crossLeg(direction);\n\n    if (!isCrossing) {\n      coordY += move;\n      drawFootprint(coordX, coordY);\n    }\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 5);\n    return () => clearInterval(draw);\n  }, [canvasRef, canvas]);\n  return /*#__PURE__*/_jsxDEV(Paths, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PathsContainer, \"8XxyMZdv79carE9WYZZzBxU9NyM=\");\n\n_c = PathsContainer;\nexport default PathsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathsContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js"],"names":["Paths","React","useEffect","useContext","useState","Context","PathsContainer","idx","canvasRef","state","updateResult","legs","players","playerCount","canvas","setCanvas","draw","posX","posY","isCrossing","ctx","getContext","canvasWidth","width","canvasHeight","height","viewPort","window","innerWidth","radius","move","gapX","gapY","coordX","coordY","RIGHT","LEFT","STRAIGHT","direction","getFinalX","newX","finalX","drawFootprint","X","Y","image","Image","src","console","log","drawImage","beginPath","arc","Math","PI","fillStyle","color","fill","closePath","crossLeg","reachFinalRightX","reachFinalLeftX","drawPath","needChecking","clearInterval","isRight","includes","isLeft","current","setInterval"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({ idx, canvasRef }) => {\n  const { state, updateResult } = useContext(Context);\n  const { legs, players, playerCount } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 0;\n  let isCrossing = false;\n\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const move = 1;\n  const gapX = canvasWidth / (playerCount * 2);\n  const gapY = canvasHeight / 10;\n  let coordX = gapX * (2 * idx + 1);\n  let coordY = 0;\n\n  const RIGHT = \"RIGHT\";\n  const LEFT = \"LEFT\";\n  const STRAIGHT = \"STRAIGHT\";\n  let direction = STRAIGHT;\n\n  const getFinalX = (newX, direction) => {\n    let finalX = gapX * (2 * newX + 1);\n    finalX = direction === RIGHT ? finalX - 1 : finalX + 1;\n    return finalX;\n  };\n\n  const drawFootprint = (X, Y) => {\n    const image = new Image();\n    image.src = players[idx].src;\n    console.log(image);\n    ctx.drawImage(image, X, Y, 20, 20);\n    ctx.beginPath();\n    ctx.arc(X, Y, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = (direction) => {\n    const finalX = getFinalX(posX, direction);\n    const reachFinalRightX = direction === RIGHT && coordX >= finalX;\n    const reachFinalLeftX = direction === LEFT && coordX <= finalX;\n\n    coordX = direction === RIGHT ? coordX + move : coordX - move;\n    drawFootprint(coordX, coordY);\n\n    if (reachFinalLeftX || reachFinalRightX) {\n      isCrossing = false;\n      coordY += move;\n    }\n  };\n\n  const drawPath = () => {\n    let needChecking = coordY !== 0 && coordY % gapY === 0 && !isCrossing;\n\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      updateResult(idx, posX);\n      return;\n    }\n\n    if (needChecking) {\n      const isRight = (legs[posX] && legs[posX].includes(posY)) || false;\n      const isLeft = (legs[posX - 1] && legs[posX - 1].includes(posY)) || false;\n      direction = isRight ? RIGHT : isLeft ? LEFT : STRAIGHT;\n\n      posY++;\n      posX = isRight ? posX + move : isLeft ? posX - move : posX;\n      isCrossing = direction !== STRAIGHT;\n    }\n\n    if (isCrossing) crossLeg(direction);\n    if (!isCrossing) {\n      coordY += move;\n      drawFootprint(coordX, coordY);\n    }\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 5);\n\n    return () => clearInterval(draw);\n  }, [canvasRef, canvas]);\n\n  return <Paths />;\n};\n\nexport default PathsContainer;\n"]},"metadata":{},"sourceType":"module"}