{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, { useRef, useEffect, useCallback, useContext, useState } from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({\n  idx,\n  canvasRef\n}) => {\n  _s();\n\n  const {\n    state\n  } = useContext(Context);\n  const {\n    legs,\n    players,\n    playerCount\n  } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 1;\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const gapY = canvasHeight / 10;\n  const gapX = canvasWidth / (playerCount * 2);\n  let coordY = 0;\n  let coordX = posX === 0 ? gapX + 1.5 : posX === playerCount - 1 ? gapX - 1.5 : gapX;\n\n  const drawFootprint = () => {\n    ctx.beginPath();\n    ctx.arc(coordX, coordY, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = () => {};\n\n  const drawPath = () => {\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      return;\n    }\n\n    const needChecking = !(coordY % gapY);\n\n    if (needChecking) {\n      const isRight = legs[posX] && legs[posX].includes(posY);\n      const isLeft = legs[posX - 1] && legs[posX - 1].includes(posY);\n      const direction = isRight ? \"right\" : isLeft ? \"left\" : \"straight\";\n      console.log(isLeft, isRight);\n      console.log(idx, posX, direction, posY);\n      posY++;\n    }\n\n    coordY += radius;\n    drawFootprint();\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 30);\n  }, [canvasRef, canvas]);\n  return /*#__PURE__*/_jsxDEV(Paths, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PathsContainer, \"qqb7gCZ2dILAKQeO45DStuZ+rBA=\");\n\n_c = PathsContainer;\nexport default PathsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathsContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js"],"names":["Paths","React","useRef","useEffect","useCallback","useContext","useState","Context","PathsContainer","idx","canvasRef","state","legs","players","playerCount","canvas","setCanvas","draw","posX","posY","ctx","getContext","canvasWidth","width","canvasHeight","height","viewPort","window","innerWidth","radius","gapY","gapX","coordY","coordX","drawFootprint","beginPath","arc","Math","PI","fillStyle","color","fill","closePath","crossLeg","drawPath","clearInterval","needChecking","isRight","includes","isLeft","direction","console","log","current","setInterval"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport Paths from \"Components/Paths\";\nimport React, {\n  useRef,\n  useEffect,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Context } from \"Context\";\n\nconst PathsContainer = ({ idx, canvasRef }) => {\n  const { state } = useContext(Context);\n  const { legs, players, playerCount } = state;\n  const [canvas, setCanvas] = useState(null);\n  let draw = null;\n  let posX = idx;\n  let posY = 1;\n\n  const ctx = canvas && canvas.getContext(\"2d\");\n  const canvasWidth = canvas && canvas.width;\n  const canvasHeight = canvas && canvas.height;\n  const viewPort = window.innerWidth > 812 ? \"pc\" : \"mobile\";\n  const radius = viewPort === \"pc\" ? 2 : 1.5;\n  const gapY = canvasHeight / 10;\n  const gapX = canvasWidth / (playerCount * 2);\n  let coordY = 0;\n  let coordX =\n    posX === 0 ? gapX + 1.5 : posX === playerCount - 1 ? gapX - 1.5 : gapX;\n\n  const drawFootprint = () => {\n    ctx.beginPath();\n    ctx.arc(coordX, coordY, radius, 0, Math.PI * 10);\n    ctx.fillStyle = players[idx].color;\n    ctx.fill();\n    ctx.closePath();\n  };\n\n  const crossLeg = () => {};\n\n  const drawPath = () => {\n    if (coordY === canvasHeight) {\n      clearInterval(draw);\n      return;\n    }\n\n    const needChecking = !(coordY % gapY);\n\n    if (needChecking) {\n      const isRight = legs[posX] && legs[posX].includes(posY);\n      const isLeft = legs[posX - 1] && legs[posX - 1].includes(posY);\n      const direction = isRight ? \"right\" : isLeft ? \"left\" : \"straight\";\n\n      console.log(isLeft, isRight);\n      console.log(idx, posX, direction, posY);\n      posY++;\n    }\n\n    coordY += radius;\n\n    drawFootprint();\n  };\n\n  useEffect(() => {\n    setCanvas(canvasRef.current);\n    if (canvas) draw = setInterval(() => drawPath(), 30);\n  }, [canvasRef, canvas]);\n\n  return <Paths />;\n};\n\nexport default PathsContainer;\n"]},"metadata":{},"sourceType":"module"}