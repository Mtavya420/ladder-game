{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/LadderContainer.js\",\n    _s = $RefreshSig$();\n\nimport Ladder from \"Components/Ladder\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport { Context } from \"Context\";\nimport Partition from \"Components/Partition\";\nimport CanvasContainer from \"./CanvasContainer\";\n\nconst LadderContainer = () => {\n  _s();\n\n  const {\n    state,\n    startGame,\n    getRandomLegs,\n    getLadderPos\n  } = useContext(Context);\n  const {\n    legs,\n    playerCount,\n    gameState\n  } = state;\n  const wrapperRef = useRef();\n  useEffect(() => {\n    if (gameState === \"setting\") getRandomLegs(playerCount);\n    wrapperRef && getLadderPos(wrapperRef.current.offsetTop);\n    wrapperRef && console.log(wrapperRef, wrapperRef.current.offsetTop);\n  }, [gameState]);\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: gameState === \"setting\" || gameState === \"ready\" ? /*#__PURE__*/_jsxDEV(Partition, {\n      ref: wrapperRef,\n      gameState: gameState,\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Ladder, {\n        legs: legs,\n        playerCount: playerCount,\n        gameState: gameState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CanvasContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(LadderContainer, \"PB7y+0IGc2HpFerFfFHwJCpe4gA=\");\n\n_c = LadderContainer;\nexport default LadderContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LadderContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/LadderContainer.js"],"names":["Ladder","React","useContext","useEffect","useRef","Context","Partition","CanvasContainer","LadderContainer","state","startGame","getRandomLegs","getLadderPos","legs","playerCount","gameState","wrapperRef","current","offsetTop","console","log"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,aAApB;AAAmCC,IAAAA;AAAnC,MAAoDV,UAAU,CAACG,OAAD,CAApE;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,WAAR;AAAqBC,IAAAA;AAArB,MAAmCN,KAAzC;AACA,QAAMO,UAAU,GAAGZ,MAAM,EAAzB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,SAAS,KAAK,SAAlB,EAA6BJ,aAAa,CAACG,WAAD,CAAb;AAC7BE,IAAAA,UAAU,IAAIJ,YAAY,CAACI,UAAU,CAACC,OAAX,CAAmBC,SAApB,CAA1B;AACAF,IAAAA,UAAU,IAAIG,OAAO,CAACC,GAAR,CAAYJ,UAAZ,EAAwBA,UAAU,CAACC,OAAX,CAAmBC,SAA3C,CAAd;AACD,GAJQ,EAIN,CAACH,SAAD,CAJM,CAAT;AAMAZ,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,EAAX,CAAT;AAEA,sBACE;AAAA,cACGY,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,OAAzC,gBACC,QAAC,SAAD;AACE,MAAA,GAAG,EAAEC,UADP;AAEE,MAAA,SAAS,EAAED,SAFb;AAGE,MAAA,SAAS,EAAEL;AAHb;AAAA;AAAA;AAAA;AAAA,YADD,gBAOC;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEG,IAAd;AAAoB,QAAA,WAAW,EAAEC,WAAjC;AAA8C,QAAA,SAAS,EAAEC;AAAzD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AARJ,mBADF;AAgBD,CA7BD;;GAAMP,e;;KAAAA,e;AA+BN,eAAeA,eAAf","sourcesContent":["import Ladder from \"Components/Ladder\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport { Context } from \"Context\";\nimport Partition from \"Components/Partition\";\nimport CanvasContainer from \"./CanvasContainer\";\n\nconst LadderContainer = () => {\n  const { state, startGame, getRandomLegs, getLadderPos } = useContext(Context);\n  const { legs, playerCount, gameState } = state;\n  const wrapperRef = useRef();\n\n  useEffect(() => {\n    if (gameState === \"setting\") getRandomLegs(playerCount);\n    wrapperRef && getLadderPos(wrapperRef.current.offsetTop);\n    wrapperRef && console.log(wrapperRef, wrapperRef.current.offsetTop);\n  }, [gameState]);\n\n  useEffect(() => {}, []);\n\n  return (\n    <>\n      {gameState === \"setting\" || gameState === \"ready\" ? (\n        <Partition\n          ref={wrapperRef}\n          gameState={gameState}\n          startGame={startGame}\n        />\n      ) : (\n        <>\n          <Ladder legs={legs} playerCount={playerCount} gameState={gameState} />\n          <CanvasContainer />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LadderContainer;\n"]},"metadata":{},"sourceType":"module"}