{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/CanvasContainer.js\",\n    _s = $RefreshSig$();\n\nimport Canvas from \"Components/Canvas\";\nimport React, { useRef, useContext, useEffect } from \"react\";\nimport { Context } from \"Context\";\n\nconst CanvasContainer = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(Context);\n  const {\n    playerCount\n  } = state;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    console.log(canvasRef.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    playerCount: playerCount,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CanvasContainer, \"ckKmihAYNsVPBxGGztLVbjR2Y+E=\");\n\n_c = CanvasContainer;\nexport default CanvasContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/CanvasContainer.js"],"names":["Canvas","React","useRef","useContext","useEffect","Context","CanvasContainer","state","playerCount","canvasRef","console","log","current"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,SAAxB;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,UAAU,CAACE,OAAD,CAA5B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAkBD,KAAxB;AACA,QAAME,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACG,OAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO,QAAC,MAAD;AAAQ,IAAA,WAAW,EAAEJ,WAArB;AAAkC,IAAA,GAAG,EAAEC;AAAvC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAVD;;GAAMH,e;;KAAAA,e;AAYN,eAAeA,eAAf","sourcesContent":["import Canvas from \"Components/Canvas\";\nimport React, { useRef, useContext, useEffect } from \"react\";\nimport { Context } from \"Context\";\n\nconst CanvasContainer = () => {\n  const { state } = useContext(Context);\n  const { playerCount } = state;\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    console.log(canvasRef.current);\n  }, []);\n\n  return <Canvas playerCount={playerCount} ref={canvasRef} />;\n};\n\nexport default CanvasContainer;\n"]},"metadata":{},"sourceType":"module"}