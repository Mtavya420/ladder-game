{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport { initState, reducer } from \"Reducer\";\n\nconst useHook = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const increasePlayers = () => dispatch({\n    type: \"INCREASE_PLAYERS\"\n  });\n\n  const decreasePlayers = () => dispatch({\n    type: \"DECREASE_PLAYERS\"\n  });\n\n  const enterGame = () => dispatch({\n    type: \"ENTER_GAME\"\n  });\n\n  const startGame = () => dispatch({\n    type: \"START_GAME\"\n  });\n\n  const checkReady = (cases, playerCount) => {\n    const values = Object.values(cases);\n    const state = values.every(value => value.trim() !== \"\");\n    const caseCount = values.length === playerCount;\n    console.log(cases);\n    dispatch({\n      type: \"CHECK_READY\",\n      gameState: state && caseCount\n    });\n  };\n\n  const resetCase = playerCount => {\n    const cases = {};\n\n    for (let i = 0; i < playerCount; i++) cases[i] = \"\";\n\n    dispatch({\n      type: \"RESET_CASE\",\n      cases\n    });\n  };\n\n  const inputCase = (e, idx) => {\n    const {\n      value\n    } = e.target;\n    dispatch({\n      type: \"INPUT_CASE\",\n      idx,\n      value\n    });\n  };\n\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n\n  const getRandomPlayers = (playerCount, data) => {\n    const players = new Set();\n\n    while (players.size < playerCount) players.add(data[getRandomNumber(0, 10)]);\n\n    dispatch({\n      type: \"GET_PLAYERS\",\n      players: [...players]\n    });\n  };\n\n  const getRandomLegs = playerCount => {\n    const legCounts = [];\n    const legs = [];\n    let rows = new Set();\n    let column = 0;\n\n    for (let i = 1; i < playerCount; i++) legCounts.push(getRandomNumber(2, 5));\n\n    while (column < playerCount - 1) {\n      if (rows.size === legCounts[column]) {\n        legs.push([...rows].sort());\n        rows = new Set();\n        column++;\n      }\n\n      const num = getRandomNumber(0, 9);\n      if (column < 1) rows.add(num);else {\n        const isDuplicate = legs[column - 1].includes(num);\n        if (!isDuplicate) rows.add(num);\n      }\n    }\n\n    dispatch({\n      type: \"GET_LEGS\",\n      legs\n    });\n  };\n\n  const goHome = () => dispatch({\n    type: \"GO_HOME\"\n  });\n\n  const goResult = () => dispatch({\n    type: \"GO_RESULT\"\n  });\n\n  const goGame = () => dispatch({\n    type: \"GO_GAME\"\n  });\n\n  const updateResult = (idx, posX) => dispatch({\n    type: \"UPDATE_RESULT\",\n    idx,\n    posX\n  });\n\n  return {\n    state,\n    increasePlayers,\n    decreasePlayers,\n    enterGame,\n    startGame,\n    checkReady,\n    resetCase,\n    inputCase,\n    getRandomPlayers,\n    getRandomLegs,\n    goHome,\n    goResult,\n    goGame,\n    updateResult\n  };\n};\n\n_s(useHook, \"ivzsx5aR9qRFuEtyOcndflQiQ1Q=\");\n\nexport default useHook;","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Hooks.js"],"names":["useReducer","initState","reducer","useHook","state","dispatch","increasePlayers","type","decreasePlayers","enterGame","startGame","checkReady","cases","playerCount","values","Object","every","value","trim","caseCount","length","console","log","gameState","resetCase","i","inputCase","e","idx","target","getRandomNumber","min","max","Math","ceil","floor","random","getRandomPlayers","data","players","Set","size","add","getRandomLegs","legCounts","legs","rows","column","push","sort","num","isDuplicate","includes","goHome","goResult","goGame","updateResult","posX"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport { initState, reducer } from \"Reducer\";\n\nconst useHook = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  const increasePlayers = () => dispatch({ type: \"INCREASE_PLAYERS\" });\n  const decreasePlayers = () => dispatch({ type: \"DECREASE_PLAYERS\" });\n\n  const enterGame = () => dispatch({ type: \"ENTER_GAME\" });\n  const startGame = () => dispatch({ type: \"START_GAME\" });\n\n  const checkReady = (cases, playerCount) => {\n    const values = Object.values(cases);\n    const state = values.every((value) => value.trim() !== \"\");\n    const caseCount = values.length === playerCount;\n    console.log(cases);\n    dispatch({ type: \"CHECK_READY\", gameState: state && caseCount });\n  };\n\n  const resetCase = (playerCount) => {\n    const cases = {};\n    for (let i = 0; i < playerCount; i++) cases[i] = \"\";\n    dispatch({ type: \"RESET_CASE\", cases });\n  };\n\n  const inputCase = (e, idx) => {\n    const { value } = e.target;\n    dispatch({ type: \"INPUT_CASE\", idx, value });\n  };\n\n  const getRandomNumber = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n  };\n\n  const getRandomPlayers = (playerCount, data) => {\n    const players = new Set();\n    while (players.size < playerCount)\n      players.add(data[getRandomNumber(0, 10)]);\n    dispatch({ type: \"GET_PLAYERS\", players: [...players] });\n  };\n\n  const getRandomLegs = (playerCount) => {\n    const legCounts = [];\n    const legs = [];\n    let rows = new Set();\n    let column = 0;\n\n    for (let i = 1; i < playerCount; i++) legCounts.push(getRandomNumber(2, 5));\n\n    while (column < playerCount - 1) {\n      if (rows.size === legCounts[column]) {\n        legs.push([...rows].sort());\n        rows = new Set();\n        column++;\n      }\n\n      const num = getRandomNumber(0, 9);\n      if (column < 1) rows.add(num);\n      else {\n        const isDuplicate = legs[column - 1].includes(num);\n        if (!isDuplicate) rows.add(num);\n      }\n    }\n\n    dispatch({ type: \"GET_LEGS\", legs });\n  };\n\n  const goHome = () => dispatch({ type: \"GO_HOME\" });\n  const goResult = () => dispatch({ type: \"GO_RESULT\" });\n  const goGame = () => dispatch({ type: \"GO_GAME\" });\n\n  const updateResult = (idx, posX) =>\n    dispatch({ type: \"UPDATE_RESULT\", idx, posX });\n\n  return {\n    state,\n    increasePlayers,\n    decreasePlayers,\n    enterGame,\n    startGame,\n    checkReady,\n    resetCase,\n    inputCase,\n    getRandomPlayers,\n    getRandomLegs,\n    goHome,\n    goResult,\n    goGame,\n    updateResult,\n  };\n};\n\nexport default useHook;\n"]},"metadata":{},"sourceType":"module"}