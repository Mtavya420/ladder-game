{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js\",\n    _s = $RefreshSig$();\n\nimport Paths from \"Components/Paths\";\nimport React, { useEffect } from \"react\";\n\nconst PathsContainer = ({\n  canvasRef\n}) => {\n  _s();\n\n  let canvas = null;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.beginPath();\n  ctx.arc(1, 2, 2, 0, Math.PI * 2);\n  useEffect(() => {\n    canvas = canvasRef.current;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Paths, {\n      canvas: canvas,\n      ctx: ctx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(PathsContainer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PathsContainer;\nexport default PathsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PathsContainer\");","map":{"version":3,"sources":["/Users/friendship/Documents/dev/ghost-leg/ver_2/src/Containers/PathsContainer.js"],"names":["Paths","React","useEffect","PathsContainer","canvasRef","canvas","ctx","getContext","beginPath","arc","Math","PI","current"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACxC,MAAIC,MAAM,GAAG,IAAb;AACA,QAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACAD,EAAAA,GAAG,CAACE,SAAJ;AACAF,EAAAA,GAAG,CAACG,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoBC,IAAI,CAACC,EAAL,GAAU,CAA9B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,MAAM,GAAGD,SAAS,CAACQ,OAAnB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEP,MAAf;AAAuB,MAAA,GAAG,EAAEC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAfD;;GAAMH,c;;KAAAA,c;AAiBN,eAAeA,cAAf","sourcesContent":["import Paths from \"Components/Paths\";\nimport React, { useEffect } from \"react\";\n\nconst PathsContainer = ({ canvasRef }) => {\n  let canvas = null;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.beginPath();\n  ctx.arc(1, 2, 2, 0, Math.PI * 2);\n\n  useEffect(() => {\n    canvas = canvasRef.current;\n  }, []);\n\n  return (\n    <>\n      <Paths canvas={canvas} ctx={ctx} />\n    </>\n  );\n};\n\nexport default PathsContainer;\n"]},"metadata":{},"sourceType":"module"}